{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","KEY","App","props","state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nearestCodes","nearestDetails","error","currentPosition","orientation","absolute","alpha","beta","counter","window","addEventListener","handleOrientation","bind","assertThisInitialized","navigator","geolocation","getNearestCaches","setState","_this2","getCurrentPosition","position","handleCurrentPosition","_","event","Math","round","fetchCachesNearest","then","handleCachesNearest","response","results","fetchCachesDetails","handleCachesDetails","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","code","value","push","objectSpread","distance","calculateDistance","coords","latitude","longitude","location","split","err","return","lat1","lon1","lat2","lon2","dLat","PI","dLon","a","sin","cos","atan2","sqrt","URL","concat","fetch","json","codes","join","cache","react_default","createElement","className","style","padding","margin","name","type","rating","size2","terrain","recommendations","border","borderBottom","_this3","maxWidth","JSON","stringify","map","renderCache","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8397251.chunk.js","sourcesContent":["import React, { Component, ReactNode } from \"react\";\nimport \"./App.css\";\n\nconst API_URL = \"https://opencaching.pl/okapi/\";\nconst KEY = \"?consumer_key=8v5yBJfdTpcsxEnzUPah\";\n\ninterface AppState {\n  nearestCodes: Array<string>;\n  nearestDetails: Array<{\n    distance: number;\n    code: string;\n    name: string;\n    location: string;\n    status: string;\n    type: string;\n  }>\n  error: string;\n  currentPosition: Position | null;\n  orientation: {\n    absolute: boolean;\n    alpha: number | null;\n    beta: number | null;\n    counter: number;\n  };\n}\n\n\ninterface CachesDetailsResponse {\n  [code: string]: {\n    code: string;\n    name: string;\n    location: string;\n    status: string;\n    type: string\n  }\n}\n\ninterface CachesNearestResponse {\n  results: Array<string>;\n}\n\nclass App extends Component<any, AppState> {\n  constructor(props: any, state: AppState) {\n    super(props);\n    this.state = {\n      nearestCodes: [],\n      nearestDetails: [],\n      error: \"\",\n      currentPosition: null,\n      orientation: { absolute: false, alpha: 0, beta: 0, counter: 0 },\n    };\n    window.addEventListener(\"deviceorientation\", this.handleOrientation.bind(this), true);\n    if (navigator.geolocation) {\n      this.getNearestCaches();\n    } else {\n      this.setState({ error: \"No location services available\" });\n    }\n  }\n\n  // ACTIONS\n  getNearestCaches(): void {\n    navigator.geolocation.getCurrentPosition(\n      (position: Position) => {\n        this.setState({ currentPosition: position });\n        this.handleCurrentPosition.call(this, position);\n      },\n      _ => {\n        this.setState({\n          error: \"Please allow location services for this browser\"\n        });\n      }\n    );\n  }\n\n  // HANDLERS\n  handleOrientation(event: DeviceOrientationEvent) {\n    this.setState({ orientation: {\n      absolute: event.absolute,\n      alpha: Math.round(event.alpha || 0),\n      beta: Math.round(event.beta || 0),\n      counter: this.state.orientation.counter + 1 }\n    });\n  }\n\n  handleCurrentPosition(position: Position): void {\n    this.fetchCachesNearest(position).then(this.handleCachesNearest.bind(this));\n  }\n\n  handleCachesNearest(response: CachesNearestResponse): void {\n    this.setState({ nearestCodes: response.results });\n    this.fetchCachesDetails(this.state.nearestCodes).then(\n      this.handleCachesDetails.bind(this)\n    );\n  }\n\n  handleCachesDetails(response: CachesDetailsResponse): void {\n    let nearestDetails = [];\n    for (let code of this.state.nearestCodes) {\n      nearestDetails.push({\n        distance: this.calculateDistance(\n          this.state.currentPosition!.coords.latitude,\n          this.state.currentPosition!.coords.longitude,\n          +response[code].location.split(\"|\")[0],\n          +response[code].location.split(\"|\")[1]\n        ),\n        ...response[code]\n      });\n    }\n    this.setState({ nearestDetails: nearestDetails });\n  }\n\n  // HELPER FUNCTIONS\n  calculateDistance(\n    lat1: number,\n    lon1: number,\n    lat2: number,\n    lon2: number\n  ): number {\n    var R = 6378.137;\n    var dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n    var dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((lat1 * Math.PI) / 180) *\n        Math.cos((lat2 * Math.PI) / 180) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    return d * 1000;\n  }\n\n  // API COMUNICATION\n  fetchCachesNearest(position: Position): Promise<CachesNearestResponse> {\n    const ENDPOINT = \"services/caches/search/nearest\";\n    const URL = `${API_URL}${ENDPOINT}${KEY}&center=${\n      position.coords.latitude\n    }|${position.coords.longitude}`;\n    return fetch(URL).then(response => response.json());\n  }\n\n  fetchCachesDetails(codes: Array<string>): Promise<CachesDetailsResponse> {\n    const ENDPOINT = \"services/caches/geocaches\";\n    const URL = `${API_URL}${ENDPOINT}${KEY}&cache_codes=${codes.join(\n      \"|\"\n    )}&fields=code|name|location|type|status|size2|difficulty|terrain|rating|recommendations`;\n    return fetch(URL).then(response => response.json());\n  }\n\n  // RENDERING\n  renderCache(cache: any) {\n    let nameStyle = {\n      margin: 0\n    };\n    return (\n      <div>\n        <div className=\"container\" style={{ padding: '10px' }}>\n          <h3 style={nameStyle}>{cache.name}</h3>\n          <p>\n            Dystans: {Math.round(cache.distance)}m | Typ: {cache.type} | Ocena:{\" \"}\n            {cache.rating} | Rozmiar: {cache.size2} | Teren: {cache.terrain} |\n            Rekomendacje: {cache.recommendations}\n          </p>\n        </div>\n        <hr style={ { border: 0, borderBottom: '1px solid #eee'} }></hr>\n      </div>\n    );\n  }\n\n  render(): ReactNode {\n    let appStyle = {\n      maxWidth: \"1100px\",\n      margin: \"0 auto\"\n    };\n\n    return (\n      <div style={appStyle}>\n        <p>{this.state.error}</p>\n        <div className=\"container\" style={{ margin: '10px 0' }}>Current device orientation: {JSON.stringify(this.state.orientation)}</div>\n        {this.state.nearestDetails.map(cache => this.renderCache(cache))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}