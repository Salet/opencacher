{"version":3,"sources":["pages/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","geolocationObject","navigator","geolocation","geolocationEnabled","timestamp","coords","latitude","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","orientationEvents","orientation","absolute","alpha","beta","gamma","window","addEventListener","handleOrientationEvent","bind","assertThisInitialized","watchPosition","handlePositionEvent","handlePositionError","enableHighAccuracy","position","setState","error","event","react_default","a","createElement","className","JSON","stringify","Component","Boolean","location","hostname","match","ReactDOM","render","app_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAkBqBA,qBACnB,SAAAA,EAAYC,EAAYC,GAAiB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACvCG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,KACDC,MAAQ,CACXQ,oBAAqBC,UAAUC,YAC/BC,oBAAoB,EACpBD,YAAa,CACXE,UAAW,EACXC,OAAQ,CACNC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,iBAAkB,EAClBC,QAAS,EACTC,MAAO,IAGXC,mBAAmB,EACnBC,YAAa,CACXC,UAAU,EACVC,MAAO,EACPC,KAAM,EACNC,MAAO,IAIXC,OAAOC,iBACL,oBACA3B,EAAK4B,uBAAuBC,KAA5B5B,OAAA6B,EAAA,EAAA7B,QAAA6B,EAAA,EAAA7B,CAAAD,MACA,GAGFQ,UAAUC,YAAYsB,cACpB/B,EAAKgC,oBAAoBH,KAAzB5B,OAAA6B,EAAA,EAAA7B,QAAA6B,EAAA,EAAA7B,CAAAD,KACAA,EAAKiC,oBAAoBJ,KAAzB5B,OAAA6B,EAAA,EAAA7B,QAAA6B,EAAA,EAAA7B,CAAAD,KACA,CAAEkC,oBAAoB,IAnCelC,mFAuCrBmC,GACbhC,KAAKJ,MAAMW,oBACdP,KAAKiC,SAAS,CAAE1B,oBAAoB,gDAIpB2B,GAClBlC,KAAKiC,SAAS,CAAE1B,oBAAoB,mDAGf4B,GAChBnC,KAAKJ,MAAMqB,mBACdjB,KAAKiC,SAAS,CAAEhB,mBAAmB,IAErCjB,KAAKiC,SAAS,CACZf,YAAa,CACXC,SAAUgB,EAAMhB,SAChBC,MAAOe,EAAMf,OAAS,EACtBC,KAAMc,EAAMd,MAAQ,EACpBC,MAAOa,EAAMb,OAAS,sCAM1B,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCACuBtC,KAAKJ,MAAMQ,kBAAoB,MAAQ,MAE9DgC,EAAAC,EAAAC,cAAA,kCACwBtC,KAAKJ,MAAMW,mBAAqB,MAAQ,MAEhE6B,EAAAC,EAAAC,cAAA,kCAA0BE,KAAKC,UAAUzC,KAAKJ,MAAMU,cACpD8B,EAAAC,EAAAC,cAAA,uCAC6B,IAC1BtC,KAAKJ,MAAMqB,kBAAoB,MAAQ,MAE1CmB,EAAAC,EAAAC,cAAA,kCAA0BE,KAAKC,UAAUzC,KAAKJ,MAAMsB,uBA/E7BwB,cCNbC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmB9C,WACrBA,UAAU+C,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59cd6e4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./app.css\";\n\ninterface Orientation {\n  absolute: boolean;\n  alpha: number;\n  beta: number;\n  gamma: number;\n}\n\ninterface AppState {\n  geolocationObject: boolean;\n  geolocationEnabled: boolean;\n  geolocation: Position;\n  orientationEvents: boolean;\n  orientation: Orientation;\n}\n\nexport default class App extends Component<any, AppState> {\n  constructor(props: any, state: AppState) {\n    super(props);\n    this.state = {\n      geolocationObject: !!navigator.geolocation,\n      geolocationEnabled: false,\n      geolocation: {\n        timestamp: 0,\n        coords: {\n          latitude: 0,\n          longitude: 0,\n          altitude: 0,\n          accuracy: 0,\n          altitudeAccuracy: 0,\n          heading: 0,\n          speed: 0\n        }\n      },\n      orientationEvents: false,\n      orientation: {\n        absolute: false,\n        alpha: 0,\n        beta: 0,\n        gamma: 0\n      }\n    };\n\n    window.addEventListener(\n      \"deviceorientation\",\n      this.handleOrientationEvent.bind(this),\n      true\n    );\n\n    navigator.geolocation.watchPosition(\n      this.handlePositionEvent.bind(this),\n      this.handlePositionError.bind(this),\n      { enableHighAccuracy: true }\n    );\n  }\n\n  handlePositionEvent(position: Position) {\n    if (!this.state.geolocationEnabled) {\n      this.setState({ geolocationEnabled: true });\n    }\n  }\n\n  handlePositionError(error: any) {\n    this.setState({ geolocationEnabled: false });\n  }\n\n  handleOrientationEvent(event: DeviceOrientationEvent) {\n    if (!this.state.orientationEvents) {\n      this.setState({ orientationEvents: true });\n    }\n    this.setState({\n      orientation: {\n        absolute: event.absolute,\n        alpha: event.alpha || 0,\n        beta: event.beta || 0,\n        gamma: event.gamma || 0\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          <li>\n            Geolocation object: {this.state.geolocationObject ? \"yes\" : \"no\"}\n          </li>\n          <li>\n            Geolocation enabled: {this.state.geolocationEnabled ? \"yes\" : \"no\"}\n          </li>\n          <li>Geolocation reading: {JSON.stringify(this.state.geolocation)}</li>\n          <li>\n            Device orientation events:{\" \"}\n            {this.state.orientationEvents ? \"yes\" : \"no\"}\n          </li>\n          <li>Orientation reading: {JSON.stringify(this.state.orientation)}</li>\n        </ul>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}