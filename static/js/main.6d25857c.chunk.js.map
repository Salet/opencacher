{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","KEY","App","props","state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nearestCodes","nearestDetails","error","currentPosition","navigator","geolocation","getNearestCaches","setState","_this2","getCurrentPosition","position","handleCurrentPosition","_","fetchCachesNearest","then","handleCachesNearest","bind","response","results","fetchCachesDetails","handleCachesDetails","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","code","value","push","objectSpread","distance","calculateDistance","coords","latitude","longitude","location","split","err","return","lat1","lon1","lat2","lon2","dLat","Math","PI","dLon","a","sin","cos","atan2","sqrt","URL","concat","fetch","json","codes","join","cache","react_default","createElement","style","border","borderRadius","padding","marginBottom","margin","name","round","type","rating","size2","terrain","recommendations","_this3","maxWidth","map","renderCache","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d25857c.chunk.js","sourcesContent":["import React, { Component, ReactNode } from \"react\";\nimport \"./App.css\";\n\nconst API_URL = \"https://opencaching.pl/okapi/\";\nconst KEY = \"?consumer_key=8v5yBJfdTpcsxEnzUPah\";\n\ninterface AppState {\n  nearestCodes: Array<string>;\n  nearestDetails: Array<{\n    distance: number;\n    code: string;\n    name: string;\n    location: string;\n    status: string;\n    type: string;\n  }>\n  error: string;\n  currentPosition: Position | null;\n}\n\n\ninterface CachesDetailsResponse {\n  [code: string]: {\n    code: string;\n    name: string;\n    location: string;\n    status: string;\n    type: string\n  }\n}\n\ninterface CachesNearestResponse {\n  results: Array<string>;\n}\n\nclass App extends Component<any, AppState> {\n  constructor(props: any, state: AppState) {\n    super(props);\n    this.state = { nearestCodes: [], nearestDetails: [], error: \"\", currentPosition: null };\n\n    if (navigator.geolocation) {\n      this.getNearestCaches();\n    } else {\n      this.setState({ error: \"No location services available\" });\n    }\n  }\n\n\n  // ACTIONS\n  getNearestCaches(): void {\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      this.setState({ currentPosition: position });\n      this.handleCurrentPosition.call(this, position);\n    }, _ => {\n      this.setState({ error: \"Please allow location services for this browser\" });\n    });\n  }\n\n\n\n  // HANDLERS\n  handleCurrentPosition(position: Position): void {\n    this.fetchCachesNearest(position).then(this.handleCachesNearest.bind(this));\n  }\n\n  handleCachesNearest(response: CachesNearestResponse): void {\n    this.setState({ nearestCodes: response.results });\n    this.fetchCachesDetails(this.state.nearestCodes).then(this.handleCachesDetails.bind(this));\n  }\n\n  handleCachesDetails(response: CachesDetailsResponse): void {\n    let nearestDetails = [];\n    for (let code of this.state.nearestCodes) {\n      nearestDetails.push({\n        distance: this.calculateDistance(\n          this.state.currentPosition!.coords.latitude,\n          this.state.currentPosition!.coords.longitude,\n          +response[code].location.split('|')[0],\n          +response[code].location.split('|')[1]\n          ),\n        ...response[code]\n      });\n    }\n    this.setState({ nearestDetails: nearestDetails });\n  }\n\n\n\n  // HELPER FUNCTIONS\n  calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    var R = 6378.137;\n    var dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\n    var dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((lat1 * Math.PI) / 180) *\n        Math.cos((lat2 * Math.PI) / 180) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    return d * 1000;\n  }\n\n  // API COMUNICATION\n  fetchCachesNearest(position: Position): Promise<CachesNearestResponse> {\n    const ENDPOINT = \"services/caches/search/nearest\";\n    const URL = `${API_URL}${ENDPOINT}${KEY}&center=${\n      position.coords.latitude\n    }|${position.coords.longitude}`;\n    return fetch(URL).then(response => response.json());\n  }\n\n  fetchCachesDetails(codes: Array<string>): Promise<CachesDetailsResponse> {\n    const ENDPOINT = \"services/caches/geocaches\";\n    const URL = `${API_URL}${ENDPOINT}${KEY}&cache_codes=${codes.join(\"|\")}&fields=code|name|location|type|status|size2|difficulty|terrain|rating|recommendations`;\n    return fetch(URL).then(response => response.json());\n  }\n\n  // RENDERING\n  renderCache(cache: any) {\n    let containerStyle = {\n      border: '1px solid #eee',\n      borderRadius: '3px',\n      padding: '10px',\n      marginBottom: '10px',\n    };\n    let nameStyle = {\n      margin: 0\n    }\n    return (\n      <div style={containerStyle}>\n        <h3 style={nameStyle}>{cache.name}</h3>\n        <p>Dystans: {Math.round(cache.distance)}m | Typ: {cache.type} | Ocena: {cache.rating} | Rozmiar: {cache.size2} | Teren: {cache.terrain} | Rekomendacje: {cache.recommendations}</p>\n      </div>\n    );\n  }\n\n  render(): ReactNode {\n    let appStyle = {\n      maxWidth: '1100px',\n      margin: '0 auto',\n    }\n\n    return (\n      <div style={appStyle}>\n        { this.state.error }\n        { this.state.nearestDetails.map(cache => this.renderCache(cache)) }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}